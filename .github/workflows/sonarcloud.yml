name: Build
on:
  push:
    branches:
      - master
      - yarp-3.4
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-20.04
    steps:

    - name: Prepare Environment for SonarCloud
      env:
        SONAR_PROJECT_KEY: 'drdanz_yarp'
        SONAR_PROJECT_NAME: 'yarp'
        SONAR_ORGANIZATION: 'drdanz'
        SONAR_SCANNER_VERSION: '4.6.0.2311'
      run: |
        # project name from SonarCloud projet creation page -Dsonar.projectKey=XXXX
        echo "SONAR_PROJECT_KEY=${SONAR_PROJECT_KEY}" >> $GITHUB_ENV

        # project name from SonarCloud projet creation page -Dsonar.projectKey=XXXX
        echo "SONAR_PROJECT_NAME=${SONAR_PROJECT_NAME}" >> $GITHUB_ENV

        # project name from SonarCloud projet creation page -Dsonar.projectName=XXXX
        echo "SONAR_ORGANIZATION=${SONAR_ORGANIZATION}" >> $GITHUB_ENV

        # Set default to SONAR_HOST_URL in not provided
        echo "SONAR_HOST_URL=${SONAR_HOST_URL:-https://sonarcloud.io}" >> $GITHUB_ENV

        echo "SONAR_SCANNER_VERSION=${SONAR_SCANNER_VERSION}" >> $GITHUB_ENV

        SONAR_SCANNER_HOME=${HOME}/.sonar/sonar-scanner-${SONAR_SCANNER_VERSION}-linux
        echo "SONAR_SCANNER_HOME=${SONAR_SCANNER_HOME}" >> $GITHUB_ENV

        echo "SONAR_SCANNER_OPTS=-server" >> $GITHUB_ENV

        echo "SONAR_THREADS=${SONAR_THREADS:-1}" >> $GITHUB_ENV

        echo "PATH=${HOME}/.sonar/build-wrapper-linux-x86:${SONAR_SCANNER_HOME}/bin:${PATH}" >> $GITHUB_ENV

        cat $GITHUB_ENV

    - name: Clone repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

    # This step is copied from the build step, please keep them in sync until we
    # find a better way to do it automatically
    - name: Dependencies [Linux]
      if: runner.os == 'Linux'
      uses: nick-invision/retry@v2.2.0
      with:
        timeout_minutes: 20
        retry_wait_seconds: 300
        max_attempts: 3
        command: |
          # Install Robotology dependencies from robotology ppa
          sudo apt-add-repository -y ppa:robotology/ppa
          sudo apt-get install -qq -y ycm-cmake-modules \
                                      librobottestingframework-dev

          # Install build tools
          sudo apt-get install -qq -y cmake \
                                      ccache \
                                      ninja-build \
                                      valgrind \
                                      lcov

          sudo apt-get install -qq -y libace-dev \
                                      libsqlite3-dev \
                                      libtinyxml-dev \
                                      libedit-dev \
                                      qtbase5-dev \
                                      qtdeclarative5-dev \
                                      qtmultimedia5-dev \
                                      libqt5opengl5-dev \
                                      libqcustomplot-dev \
                                      libopencv-dev \
                                      libeigen3-dev \
                                      libgraphviz-dev \
                                      libgstreamer1.0-dev \
                                      libgstreamer-plugins-base1.0-dev \
                                      libpng-dev \
                                      libv4l-dev \
                                      libavcodec-dev \
                                      libavdevice-dev \
                                      libavformat-dev \
                                      libavutil-dev \
                                      portaudio19-dev \
                                      libsdl1.2-dev \
                                      libopenni2-dev \
                                      libftdi-dev \
                                      libi2c-dev \
                                      libfuse-dev \
                                      libjpeg-dev \
                                      libpcl-dev

          # Install SWIG and bindings dependencies
          sudo apt-get install -qq -y swig \
                                      mono-mcs \
                                      liblua5.3-dev \
                                      lua5.3 \
                                      tcl-dev \
                                      tk-dev \
                                      python3-dev \
                                      liboctave-dev \
                                      default-jdk \
                                      ruby-dev \
                                      ruby \
                                      perl

          # Remove old packages from apt cache
          sudo apt-get autoclean -qq

    - name: Download SonarCloud
      run: |
        mkdir ${HOME}/.sonar

        # Download sonar-scanner
        curl -sSLo ${HOME}/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux.zip
        unzip -o ${HOME}/.sonar/sonar-scanner.zip -d ${HOME}/.sonar/

        # Download build-wrapper
        curl -sSLo ${HOME}/.sonar/build-wrapper-linux-x86.zip https://sonarcloud.io/static/cpp/build-wrapper-linux-x86.zip
        unzip -o ${HOME}/.sonar/build-wrapper-linux-x86.zip -d ${HOME}/.sonar/

    - name: Run CMake
      run: |
        export CLICOLOR_FORCE=1
        export YARP_COLORED_OUTPUT=1

        /usr/bin/cmake -S. -Bbuild \
          -C .ci/initial-cache.gh.linux.cmake \
          -DCMAKE_C_FLAGS=-fdiagnostics-color=always \
          -DCMAKE_CXX_FLAGS=-fdiagnostics-color=always \
          -DCMAKE_BUILD_TYPE=Profile \
          "-DCMAKE_C_FLAGS_PROFILE=-pg -g3 -ggdb -fno-inline -ftest-coverage -fprofile-arcs -DNDEBUG" \
          "-DCMAKE_CXX_FLAGS_PROFILE=-pg -g3 -ggdb -fno-inline -ftest-coverage -fprofile-arcs -DNDEBUG" \
          -DCMAKE_EXPORT_COMPILE_COMMANDS:BOOL=ON \
          -DYARP_NO_DEPRECATED:BOOL=ON \
          -DYARP_COMPILE_BINDINGS:BOOL=OFF

        (cd build && lcov --directory . --zerocounters)

        (cd build && make && make test)

        # Capture coverage info for Profile builds
        (cd build; lcov --directory . --capture --output-file coverage.info)

        # Filter out system and test code
        (cd build; lcov --remove coverage.info '/usr/*' 'tests/*' 'example/*' 'extern/*' 'build/*' --output-file coverage.info)

        # Debug before upload
        (cd build; lcov --list coverage.info)

        echo "SONAR_CFAMILY_GCOV_REPORTSPATH=build/coverage.info" >> $GITHUB_ENV

    - name: SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        # Build inside the build-wrapper
        build-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory cmake --build build/ --config Profile

        build-wrapper-linux-x86-64 --out-dir build_wrapper_output_directory cmake --build build/ --config Profile --target test


        # Run sonar scanner (here, arguments are passed through the command line but most of them can be written in the sonar-project.properties file)
        [[ -v SONAR_TOKEN ]] && SONAR_TOKEN_CMD_ARG="-Dsonar.login=${SONAR_TOKEN}"
        [[ -v SONAR_ORGANIZATION ]] && SONAR_ORGANIZATION_CMD_ARG="-Dsonar.organization=${SONAR_ORGANIZATION}"
        [[ -v SONAR_PROJECT_NAME ]] && SONAR_PROJECT_NAME_CMD_ARG="-Dsonar.projectName=${SONAR_PROJECT_NAME}"
        [[ -v SONAR_CFAMILY_GCOV_REPORTSPATH ]] && SONAR_CFAMILY_GCOV_REPORTSPATH_CMD_ARG="-Dsonar.cfamily.gcov.reportsPath=${SONAR_CFAMILY_GCOV_REPORTSPATH}"
        SONAR_OTHER_ARGS="-Dsonar.projectVersion=1.0 -Dsonar.sources=src -Dsonar.cfamily.build-wrapper-output=build_wrapper_output_directory -Dsonar.sourceEncoding=UTF-8 -Dsonar.cfamily.threads=${SONAR_THREADS}"
        sonar-scanner -Dsonar.host.url="${SONAR_HOST_URL}" -Dsonar.projectKey=${SONAR_PROJECT_KEY} ${SONAR_OTHER_ARGS} ${SONAR_PROJECT_NAME_CMD_ARG} ${SONAR_TOKEN_CMD_ARG} ${SONAR_ORGANIZATION_CMD_ARG} ${SONAR_CFAMILY_GCOV_REPORTSPATH}
