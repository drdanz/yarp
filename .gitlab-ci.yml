image: drdanz/yarp-builder-debian-testing:latest

variables:
  YARP_CMAKE_GENERATOR: "Unix Makefiles"
  YARP_CMAKE_BUILD_TYPE: "Release"

before_script:
  - .ci/system_info.sh

stages:
  - configure
  - build
  - test
  - install
  - dox

################################################################################
# Job templates

.configure_template: &configure_definition
  stage: configure
  script:
    - .ci/configure.sh
  after_script:
    # Print cmake cache
    - echo "--------------------     BEGIN CMAKE CACHE    --------------------"
    - (cd build; cat CMakeCache.txt)
    - echo "--------------------      END CMAKE CACHE     --------------------"
  artifacts:
    paths:
      - build/
    expire_in: 3 hrs

.build_template: &build_definition
  stage: build
  script:
    - (cd build; cmake --build . --config ${YARP_CMAKE_BUILD_TYPE})
  artifacts:
    paths:
      - build/
    expire_in: 3 hrs

.configure_and_build_template: &configure_and_build_definition
  stage: build
  dependencies: []
  script:
    - .ci/configure.sh
    - (cd build; cmake --build . --config ${YARP_CMAKE_BUILD_TYPE})

.test_template: &test_definition
  stage: test
  script:
    - (cd build; ctest --output-on-failure --build . -C ${YARP_CMAKE_BUILD_TYPE})
  retry: 2

.install_template: &install_definition
  stage: install
  script:
    - (cd build; cmake --build . --config ${YARP_CMAKE_BUILD_TYPE} --target install)


.dox_template: &dox_definition
  stage: install
  script:
    - (cd build; cmake --build . --config ${YARP_CMAKE_BUILD_TYPE} --target dox)

################################################################################
# Test configuration with all available CMake


configure-cmake-3_0:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.0/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_1:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.1/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_2:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.2/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_3:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.3/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_4:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.4/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_5:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.5/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_6:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.6/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_7:
  <<: *configure_definition
  before_script:
    - .ci/system_info.sh
    - update-alternatives --set cmake /opt/cmake-3.7/bin/cmake

configure-cmake-3_8:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.8/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_9:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.9/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_10:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.10/bin/cmake
    - .ci/system_info.sh

configure-cmake-3_11:
  <<: *configure_definition
  before_script:
    - update-alternatives --set cmake /opt/cmake-3.11/bin/cmake
    - .ci/system_info.sh

################################################################################
# Test build with all available compilers

build-gcc-6:
  <<: *configure_and_build_definition
  before_script:
    - apt-get install g++-6 gfortran-6
    - update-alternatives --set gcc /usr/bin/gcc-6
    - .ci/system_info.sh

build-gcc-7:
  <<: *configure_and_build_definition
  before_script:
    - apt-get install g++-7 gfortran-7
    - update-alternatives --set gcc /usr/bin/gcc-7
    - .ci/system_info.sh

build-gcc-8:
  <<: *configure_and_build_definition
  before_script:
    - apt-get install g++-8 gfortran-8
    - update-alternatives --set gcc /usr/bin/gcc-8
    - .ci/system_info.sh

build-clang-4_0:
  <<: *configure_and_build_definition
  before_script:
    - update-alternatives --set cc /usr/bin/clang
    - update-alternatives --set c++ /usr/bin/clang++
    - update-alternatives --set clang /usr/lib/llvm-4.0/bin/clang
    - .ci/system_info.sh

build-clang-5_0:
  <<: *configure_and_build_definition
  before_script:
    - update-alternatives --set cc /usr/bin/clang
    - update-alternatives --set c++ /usr/bin/clang++
    - update-alternatives --set clang /usr/lib/llvm-5.0/bin/clang
    - .ci/system_info.sh

build-clang-6_0:
  <<: *configure_and_build_definition
  before_script:
    - update-alternatives --set cc /usr/bin/clang
    - update-alternatives --set c++ /usr/bin/clang++
    - update-alternatives --set clang /usr/lib/llvm-6.0/bin/clang
    - .ci/system_info.sh

################################################################################
# debian testing

configure-debian-testing:
  <<: *configure_definition
  image: drdanz/yarp-builder-debian-testing:latest

build-debian-testing:
  <<: *build_definition
  image: drdanz/yarp-builder-debian-testing:latest
  dependencies:
    - configure-debian-testing

test-debian-testing:
  <<: *test_definition
  image: drdanz/yarp-builder-debian-testing:latest
  dependencies:
    - build-debian-testing

install-debian-testing:
  <<: *install_definition
  image: drdanz/yarp-builder-debian-testing:latest
  dependencies:
    - build-debian-testing

dox-debian-testing:
  <<: *install_definition
  image: drdanz/yarp-builder-debian-testing:latest
  dependencies:
    - build-debian-testing

################################################################################
# debian stretch

#build-debian-stretch:
  #stage: build
  #image: drdanz/yarp-builder-debian-stretch:latest
  #script:
    #- .ci/configure.sh
    #- .ci/build.sh

################################################################################
# ubuntu bionic

#build-ubuntu-bionic:
  #stage: build
  #image: drdanz/yarp-builder-ubuntu-bionic:latest
  #script:
    #- .ci/configure.sh
    #- .ci/build.sh

################################################################################
# ubuntu artful

#build-ubuntu-artful:
  #stage: build
  #image: drdanz/yarp-builder-ubuntu-artful:latest
  #script:
    #- .ci/configure.sh
    #- .ci/build.sh

################################################################################
# ubuntu xenial

#build-ubuntu-xenial:
  #stage: build
  #image: drdanz/yarp-builder-ubuntu-xenial:latest
  #script:
    #- .ci/configure.sh
    #- .ci/build.sh
