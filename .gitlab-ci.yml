before_script:
  - apt-get update -qq
  #- apt-get install -y -qq gcc-7 g++-7 clang-5.0
  - apt-get install -y -qq ninja-build lcov valgrind ccache
  - apt-get install -y -qq cmake
  - apt-get install -y -qq libace-dev libsqlite3-dev libtinyxml-dev libedit-dev
  - apt-get install -y -qq qtbase5-dev qtdeclarative5-dev qtmultimedia5-dev libqt5opengl5-dev libqcustomplot-dev
  - apt-get install -y -qq libopencv-dev libeigen3-dev libgraphviz-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev
  - apt-get install -y -qq swig3.0 mono-mcs liblua5.1-0-dev lua5.1 tcl-dev tk-dev python3-dev liboctave-dev default-jdk ruby-dev
  # Print some more system information after installing all build tools
  - echo "-------------------- BEGIN SYSTEM INFORMATION --------------------"
  - uname -a
  #- lsb_release -a
  - env
  - cat /etc/apt/sources.list
  - ls /etc/apt/sources.list.d
  - which cmake
  - cmake --version
  - which $CC
  - $CC --version
  - which $CXX
  - $CXX --version
  - which ccache
  - ccache --version
  - ccache -s
  - ls -la /usr/lib/ccache
  - which swig3.0
  - swig3.0 -version
  - which javac
  - javac -version
  - echo "--------------------  END SYSTEM INFORMATION  --------------------"
  # Prepare build directory
  - mkdir -p build
  # Prepare cmake options
  - . scripts/admin/generate-cmake-options.sh $(hostname) $(lsb_release -cs) continuous
  - export YARP_INSTALL_PREFIX="${PWD}/install"
  - export YARP_CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=${YARP_INSTALL_PREFIX}"
  - export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpcar_h264:BOOL=ON"
  - export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_COMPILE_BINDINGS=ON -DCREATE_LUA=ON -DCREATE_PYTHON=ON -DCREATE_TCL=ON -DCREATE_JAVA=ON -DCREATE_CSHARP=ON"
  # Print cmake flags
  - echo "--------------------     BEGIN CMAKE FLAGS    --------------------"
  - echo -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS}
  - echo "--------------------      END CMAKE FLAGS     --------------------"
  # Run CMake
  - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)
  # Print cmake cache
  - echo "--------------------     BEGIN CMAKE CACHE    --------------------"
  - (cd build; cat CMakeCache.txt)
  - echo "--------------------      END CMAKE CACHE     --------------------"

job1:
  image: debian:testing
  script:
    - (cd build; cmake --build . --config Release)
    - (cd build; ctest --output-on-failure --build . -C Release)
    - (cd build; cmake --build . --config Release --target install)
