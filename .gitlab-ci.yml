variables:
  CC: gcc
  CXX: g++

before_script:
  - echo "-------------------- BEGIN SYSTEM INFORMATION --------------------"
  - echo $0
  - pwd
  - ls
  - hostname
  - uname -a
  - lsb_release -a
  - env
  - cat /etc/apt/sources.list
  - ls /etc/apt/sources.list.d
  - which cmake
  - cmake --version
  - which $CC
  - $CC --version
  - which $CXX
  - $CXX --version
  - which ccache
  - ccache --version
  - ccache -s
  - ls -la /usr/lib/ccache
  - which swig3.0
  - swig3.0 -version
  - which javac
  - javac -version
  - echo "--------------------  END SYSTEM INFORMATION  --------------------"
  # Prepare build directory
  - mkdir -p build
  # Prepare cmake options
  - scripts/admin/generate-cmake-options.sh $(hostname) $(lsb_release -cs) continuous
  - export YARP_INSTALL_PREFIX="${PWD}/install"
  - export YARP_CMAKE_OPTIONS="${CMAKE_OPTIONS} -DCMAKE_INSTALL_PREFIX=${YARP_INSTALL_PREFIX}"
  - export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DENABLE_yarpcar_h264:BOOL=ON"
  - export YARP_CMAKE_OPTIONS="${YARP_CMAKE_OPTIONS} -DYARP_COMPILE_BINDINGS=ON -DCREATE_LUA=ON -DCREATE_TCL=ON -DCREATE_JAVA=ON -DCREATE_CSHARP=ON"
  # Print cmake flags
  - echo "--------------------     BEGIN CMAKE FLAGS    --------------------"
  - echo -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS}
  - echo "--------------------      END CMAKE FLAGS     --------------------"

stages:
  - configure
  - build

#configure-cmake-3.1:
  #stage: configure
  #image: drdanz/yarp-builder-debian-testing:latest
  #script:
    ## Run CMake
    #- update-alternatives --set cmake /opt/cmake-3.1.3/bin/cmake
    #- (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

#configure-cmake-3.2:
  #stage: configure
  #image: drdanz/yarp-builder-debian-testing:latest
  #script:
    ## Run CMake
    #- update-alternatives --set cmake /opt/cmake-3.2.3/bin/cmake
    #- (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

#configure-cmake-3.3:
  #stage: configure
  #image: drdanz/yarp-builder-debian-testing:latest
  #script:
    ## Run CMake
    #- update-alternatives --set cmake /opt/cmake-3.3.2/bin/cmake
    #- (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

#configure-cmake-3.4:
  #stage: configure
  #image: drdanz/yarp-builder-debian-testing:latest
  #script:
    ## Run CMake
    #- update-alternatives --set cmake /opt/cmake-3.4.3/bin/cmake
    #- (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

configure-cmake-3.5:
  stage: configure
  image: drdanz/yarp-builder-debian-testing:latest
  script:
    # Run CMake
    - update-alternatives --set cmake /opt/cmake-3.5.2/bin/cmake
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

configure-cmake-3.6:
  stage: configure
  image: drdanz/yarp-builder-debian-testing:latest
  script:
    # Run CMake
    - update-alternatives --set cmake /opt/cmake-3.6.3/bin/cmake
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

configure-cmake-3.7:
  stage: configure
  image: drdanz/yarp-builder-debian-testing:latest
  script:
    # Run CMake
    - update-alternatives --set cmake /opt/cmake-3.7.2/bin/cmake
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

configure-cmake-3.8:
  stage: configure
  image: drdanz/yarp-builder-debian-testing:latest
  script:
    # Run CMake
    - update-alternatives --set cmake /opt/cmake-3.8.2/bin/cmake
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

configure-cmake-3.9:
  stage: configure
  image: drdanz/yarp-builder-debian-testing:latest
  script:
    # Run CMake
    - update-alternatives --set cmake /opt/cmake-3.9.6/bin/cmake
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

configure-cmake-3.10:
  stage: configure
  image: drdanz/yarp-builder-debian-testing:latest
  script:
    # Run CMake
    - update-alternatives --set cmake /opt/cmake-3.10.2/bin/cmake
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

configure-cmake-3.11:
  stage: configure
  image: drdanz/yarp-builder-debian-testing:latest
  script:
    # Run CMake
    - update-alternatives --set cmake /opt/cmake-3.11.0-rc4/bin/cmake
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)

build-debian-testing:
  stage: build
  script:
    # Print cmake cache
    - (cd build; cmake -G"Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ${YARP_CMAKE_OPTIONS} ..)
    - echo "--------------------     BEGIN CMAKE CACHE    --------------------"
    - (cd build; cat CMakeCache.txt)
    - echo "--------------------      END CMAKE CACHE     --------------------"
    # Build
    - (cd build; cmake --build . --config Release)
    # Test
    - (cd build; ctest --output-on-failure --build . -C Release)
    # Install
    - (cd build; cmake --build . --config Release --target install)
