.TH "yarp" 1 "6 Feb 2007" "YARP" \" -*- nroff -*-
.ad l
.nh
.SH NAME
yarp \- The standard YARP companion utility.
The command-line utility 'yarp' performs a set of useful operations for a YARP network.
.PP
It can give status information, make and break connections between ports, and send/receive data to/from ports.
.SH "yarp"
.PP
The utility gives a friendly message if called with no arguments to confirm that it exists, and to give tips on where to get started using it. Our current implementation says:
.PP
.PP
.nf

This is the YARP network companion.
Call with the argument "help" to see a list of ways to use this program.
.fi
.PP
.SH "yarp help"
.PP
This lists a human-readable summary of the ways the utility can be used. Our current implementation says:
.PP
.PP
.nf

Here are arguments you can give this program:
help         get this list
version      get version information
where        report where the yarp name server is running
conf         report what configuration file is being used
name         send commands to the yarp name server
connect      create a connection between two ports
disconnect   remove a connection between two ports
read         read from the network and print to standard output
write        write to the network from standard input
rpc          read/write commands to a port, in standard format
server       run yarp name server
check        run a simple sanity check to see if yarp is working
.fi
.PP
.SH "yarp server"
.PP
.PP
.nf

  yarp server
  yarp server SOCKETPORT
  yarp server IP SOCKETPORT
.fi
.PP
.PP
This starts a name server running on the current machine, optionally specifying the socket-port to listen to (default whatever was used in the previous invocation, as recorded in a configuration file, or 10000 if this is the first time to run). Also, the IP by which the name server should be identified can optionally be specified (default is a fairly random choice of the IPs associated with the current machine).
.PP
If possible, a fallback multi-cast server will be started with IP 224.2.1.1 and port number 10001. The purpose of this server is to allow yarp processes to find the yarp name server in the absence of correct configuration.
.SH "yarp where"
.PP
This will report where the name server is believed to be running; for example:
.PP
.PP
.nf

Name server is available at ip 15.255.112.22 port 10000
.fi
.PP
.SH "yarp conf"
.PP
This will report where the name server location is configured. For the author's machine, the result is: 
.PP
.nf

/home/paulfitz/.yarp/conf/yarp.conf

.fi
.PP
.SH "yarp check"
.PP
Does some sanity tests of your setup. If you run 'yarp server' in one terminal, and then run this command ('yarp check') in another, you should see something like:
.PP
.PP
.nf

yarp: ==================================================================
yarp: === Trying to register some ports
yarp: ==================================================================
yarp: === Trying to connect some ports
yarp: Receiving input from /tmp/port/2 to /tmp/port/1 using tcp
yarp: Sending output from /tmp/port/2 to /tmp/port/1 using tcp
yarp: ==================================================================
yarp: === Trying to write some data
yarp: ==================================================================
yarp: === Trying to read some data
yarp: *** Read number 42
yarp: ==================================================================
yarp: === Trying to close some ports
yarp: Removing input from /tmp/port/2 to /tmp/port/1
yarp: Removing output from /tmp/port/2 to /tmp/port/1
yarp: *** YARP seems okay!
.fi
.PP
.SH "yarp version"
.PP
This will report on the yarp version available. Example:
.PP
.PP
.nf

YARP network version 2.0
.fi
.PP
.SH "yarp read"
.PP
.PP
.nf

yarp read INPUT_PORT [envelope]
yarp read INPUT_PORT [envelope] OUTPUT_PORT
.fi
.PP
.PP
This will create an input port of the specified name. It will then loop, reading ``yarp bottles'' (a simple serialized list) and printing their content to standard output. This simple utility is intended for use in testing, and getting familiar with using YARP.
.PP
For example, if you run 'yarp server' in one terminal, 'yarp read /read' in another, and 'yarp write /write verbatim /read' in another, then everything you type on the 'write' terminal will be echoed on the 'read' terminal.
.PP
Specifying an OUTPUT_PORT tries to connect that port to the current one.
.PP
Adding the 'envelope' tag will request display of any envelope information included in the message, such as timestamps. Such information may or may not be present, and is ignored if you do not specify this tag.
.SH "yarp write"
.PP
.PP
.nf

yarp write OUTPUT_PORT [verbatim]
yarp write OUTPUT_PORT [verbatim] INPUT_PORT1 INPUT_PORT2 ...
.fi
.PP
.PP
This will create an output port of the specified name. It will then loop, reading from standard input and writing yarp bottles. Optionally, a list of input ports to connect to automatically can be appended to the command. This simple utility is intended for use in testing, and getting familiar with using YARP.
.PP
If the 'verbatim' keyword is included after the OUTPUT_PORT name, then input from standard input will be transmitted as a string, rather than as a bottle. This will preserve the exact text with whitespace and quoting. Otherwise the input is interpreted as a list of values that are transmitted in a standard network format that will not preserve whitespace, quoting, and other features.
.PP
For example, if you run 'yarp server' in one terminal, 'yarp read /read' in another, and 'yarp write /write verbatim /read' in another, then everything you type on the 'write' terminal will be echoed on the 'read' terminal.
.SH "yarp rpc"
.PP
.PP
.nf

yarp rpc TARGET_PORT
yarp rpc TARGET_PORT CONNECTION_NAME
.fi
.PP
.PP
This will send a message to the target port and expect a response. Useful only if you have a port that actually will respond. Ports associated with devices may behave like this. You may optionally specify the name for the connection. 'RPC' stands for Remote Procedure Call.
.SH "yarp connect"
.PP
.PP
.nf

yarp connect OUTPUT_PORT INPUT_PORT
yarp connect OUTPUT_PORT INPUT_PORT CARRIER
.fi
.PP
.PP
This will request the specified output port to send its output in future to the specified input port. Optionally, the carrier to be used can be added as an extra argument (e.g. tcp, udp, mcast, ...).
.SH "yarp disconnect"
.PP
.PP
.nf

yarp disconnect OUTPUT_PORT INPUT_PORT
.fi
.PP
.PP
This will request the specified output port to cease sending its output to the specified input port.
.SH "yarp connect"
.PP
.PP
.nf

yarp connect OUTPUT_PORT INPUT_PORT
yarp connect OUTPUT_PORT INPUT_PORT CARRIER
.fi
.PP
.PP
This will request the specified output port to send its output in future to the specified input port. Optionally, the carrier to be used can be added as an extra argument (e.g. tcp, udp, mcast, ...).
.SH "yarp terminate"
.PP
.PP
.nf

yarp terminate /PORTNAME
.fi
.PP
.PP
This will request the specified output to interrupt the process it belongs to. In general, this requires active cooperation from that process, so it may or may not function. Currently will work for the '.../quit' ports created by the yarpdev process.
.SH "yarp ping"
.PP
.PP
.nf

yarp ping /PORT
.fi
.PP
.PP
Get information about the specified port. Result will be something like:
.PP
.PP
.nf

This is "/port" at "tcp://192.168.0.5:10012"
There is an output connection from "/write" to "/read" using tcp
There is an input connection from "<ping>" to "/write" using text_ack
.fi
.PP
.SH "yarp exists"
.PP
.PP
.nf

yarp exists /PORT
.fi
.PP
.PP
Check if a port is alive. This can be useful as a quick test of whether the process that owns the port is running. It is designed for use in scripts -- nothing is printed, the result is encoded in the return value of the program (0 = port exists).
.SH "yarp name"
.PP
.PP
.nf

yarp name COMMAND ARG_1 ARG_2 ...
.fi
.PP
.PP
This will send the given command and arguments to the YARP name server and report the results. Here are the possible commands:
.PP
For example: 
.PP
.nf

# user types...
yarp name list
   # system responds...
   registration name root ip 172.16.232.1 port 10000 type text
   registration name fallback ip 224.2.1.1 port 10001 type mcast
   registration name /read ip 172.16.232.1 port 10002 type tcp
   registration name /write ip 172.16.232.1 port 10012 type tcp
   *** end of message

.fi
.PP
.PP
This is equivalent to:
.PP
.PP
.nf

# user types...
yarp where
   # system responds...
   Name server is available at ip 172.16.232.1 port 10000
# user types...
telnet 172.16.232.1 10000
   # system responds...
   Trying 172.16.232.1...
   Connected to 172.16.232.1.
   Escape character is '^]'.
# user types...
NAME_SERVER list
   # system responds...
   registration name /read ip 172.16.232.1 port 10002 type tcp
   registration name root ip 172.16.232.1 port 10000 type text
   registration name fallback ip 224.2.1.1 port 10001 type mcast
   registration name /write ip 172.16.232.1 port 10012 type tcp
   *** end of message
# user types...
^]
   # system responds...
   telnet> quit
   Connection closed.
.fi
.PP
.SH "yarp name help"
.PP
This will list the commands available from the name server. For example, our current implementation gives:
.PP
.PP
.nf

Here are some ways to use the name server:
  NAME_SERVER register ...
  NAME_SERVER unregister ...
  NAME_SERVER query ...
  NAME_SERVER help ...
  NAME_SERVER set ...
  NAME_SERVER get ...
  NAME_SERVER check ...
  NAME_SERVER match ...
  NAME_SERVER list ...
  NAME_SERVER route ...
*** end of message
.fi
.PP
.SH "yarp name query"
.PP
.PP
.nf

yarp name query PORT
.fi
.PP
.PP
Requests registration information for the named port. Response is of the following form: 
.PP
.nf

registration name PORT ip ADDRESS port NUMBER type CARRIER
*** end of message

.fi
.PP
 For example: 
.PP
.nf

registration name /write ip 5.255.112.227 port 10001 type tcp
*** end of message

.fi
.PP
 If there is no registration for the port, the registration line is omitted, and instead the response is simply: 
.PP
.nf

*** end of message

.fi
.PP
.SH "yarp name register"
.PP
.PP
.nf

yarp name register PORT
yarp name register PORT CARRIER
yarp name register PORT CARRIER IP
yarp name register PORT CARRIER IP NUMBER
.fi
.PP
.PP
Requests creation of registration information for the named port. Response is of the following form: 
.PP
.nf

registration name PORT ip ADDRESS port NUMBER type CARRIER
*** end of message

.fi
.PP
 For example: 
.PP
.nf

registration name /write ip 5.255.112.227 port 10001 type tcp
*** end of message

.fi
.PP
.PP
Optionally, the user can take responsibility for more fields, such as the carrier, ip, and socket port number. Any value (including the port name) can be replaced by ``...'' to leave it up to the name-server to choose it. For example: 
.PP
.nf

yarp name register ... tcp 127.0.0.1 8080

.fi
.PP
 Gives something of the form: 
.PP
.nf

registration name /tmp/port/1 ip 127.0.0.1 port 8080 type tcp
*** end of message

.fi
.PP
 If you choose to set the ip yourself, be careful -- there is the possibility of problems with multiple ways to identify the same machine. It is best to let the name server choose a name, which it should do in a consistent way. If a machine has multiple ip addresses on multiple networks, that can be handled -- see the discussion of the ips property in the section on 'yarp name set'. That is important for the purposes of controlling which network is used for connections from one port to another.
.SH "yarp name unregister"
.PP
.PP
.nf

yarp name unregister PORT
.fi
.PP
.PP
Removes registration information for the named port. Response is of the following form: 
.PP
.nf

*** end of message

.fi
.PP
.SH "yarp name list"
.PP
Gives registration information of all known ports. Response is of the following form: 
.PP
.nf

registration name /write ip 130.251.4.159 port 10021 type tcp
registration name /read ip 130.251.4.159 port 10031 type tcp
registration name /tmp/port/4 ip 130.251.4.159 port 10011 type tcp
registration name /tmp/port/3 ip 130.251.4.52 port 10021 type tcp
registration name /tmp/port/2 ip 130.251.4.52 port 10011 type tcp
registration name /tmp/port/1 ip 130.251.4.159 port 10001 type tcp
*** end of message

.fi
.PP
.SH "yarp name set"
.PP
.PP
.nf

yarp name set PORT PROPERTY VALUE1 VALUE2 ...
.fi
.PP
.PP
The name server can store extra properties of a port, beyond the bare details associated with registration. The set command is used to do this. For example, the command: 
.PP
.nf

yarp name set /write offers tcp udp mcast

.fi
.PP
 Gets the following response: 
.PP
.nf

port /write property offers = tcp udp mcast

.fi
.PP
 The get and check commands can then be used to query such properties.
.PP
There are some special properties used by YARP. Property ``ips'' can list multiple identifiers of a machine. Property ``offers'' lists carriers that an output port can support. Propery ``accepts'' lists carriers that an input port can support.
.SH "yarp name get"
.PP
.PP
.nf

yarp name get PORT PROPERTY
.fi
.PP
.PP
Gets the values of a stored property. For example, after the set command example shown earlier, the command: 
.PP
.nf

yarp name get /write offers

.fi
.PP
 Returns the following response: 
.PP
.nf

port /write property offers = tcp udp mcast

.fi
.PP
.SH "yarp name check"
.PP
.PP
.nf

yarp name check PORT PROPERTY VALUE
.fi
.PP
.PP
Checks if a stored property can take the given value. For example, after the set command example shown earlier, the command: 
.PP
.nf

yarp name check /write offers tcp

.fi
.PP
 Returns the following response: 
.PP
.nf

port /write property offers value tcp present true

.fi
.PP
.SH "yarp name route"
.PP
.PP
.nf

yarp name route PORT1 PORT2
.fi
.PP
.PP
Finds a good way to connect an output port to an input port, based on the carriers they have in common (preferred carriers can optionally be added to this command in decreasing order of preference) and which carriers are physically possible (for example, `shmem' requires ports to be on the same machine, and `local' requires ports to belong to threads with a shared memory space). For example, the command: 
.PP
.nf

yarp name route /write /read

.fi
.PP
 Returns the following response: 
.PP
.nf

port /write route /read = shmem://read

.fi
.PP
 This suggests that shmem is the best carrier to use.
.SH "An extended example"
.PP
Start five terminals, called A-E. Do the following: 
.PP
.nf

[in terminal A] yarp server
[in terminal B] yarp check

.fi
.PP
 Terminal B should run some tests, then say yarp is 'ok'. Now do the following, leaving terminal A untouched: 
.PP
.nf

[in terminal B] yarp read /read
[in terminal C] yarp write /write verbatim /read

.fi
.PP
 Now type some stuff into terminal C and hit return. That stuff should be echoed on terminal B. Now try: 
.PP
.nf

[in terminal D] yarp disconnect /write /read

.fi
.PP
 Now if you type stuff in terminal C, it no longer appears on B. Now try: 
.PP
.nf

[in terminal D] yarp connect /write /read

.fi
.PP
 Now if you type stuff in terminal C, it appears on B again.
.PP
If you have the 'yarpdev' and 'yarpview' programs, we can go further. Try: 
.PP
.nf

[in terminal E] yarpdev --device test_grabber --period 2 --width 8 --height 8 --name /grabber

.fi
.PP
 This creates a test 'device' with a port called '/grabber', outputing a very small test image every 2 seconds. You won't see much happen yet. Try: 
.PP
.nf

[in terminal D] yarpview --name /view &
[in terminal D] yarp connect /grabber /view

.fi
.PP
 You should now see a slow-moving red line. Try: 
.PP
.nf

[in terminal D] yarp connect /grabber /read

.fi
.PP
 You should now see a text representation of the image on terminal B appearing every 2 seconds. 
