// Generated by gtkmmproc -- DO NOT MODIFY!


#include <glibmm.h>

#include <gtkdataboxmm/grid.h>
#include <gtkdataboxmm/private/grid_p.h>


/* Copyright (c) 2012  Daniele E. Domenichelli <daniele.domenichelli@iit.it>
 *
 * This file is part of gtkdataboxmm.
 *
 * gtkdataboxmm is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 2.1 of the License,
 * or (at your option) any later version.
 *
 * gtkdataboxmm is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <gtkdatabox_grid.h>
#include <gdkmm/color.h>

namespace GDatabox
{
Grid::Grid(int hlines, int vlines, const Gdk::Color &color, unsigned int size) :
    // Mark this class as non-derived to allow C++ vfuncs to be skipped.
  Glib::ObjectBase(0),
  Graph(Glib::ConstructParams(grid_class_.init(), "grid_hlines",hlines,"grid_vlines",vlines,"color",color.gobj(),"size",size, static_cast<char*>(0)))
{
}

Grid::Grid(int hlines, int vlines, float *hline_vals, float *vline_vals, const Gdk::Color &color, unsigned int size) :
    Graph(gtk_databox_grid_array_new(hlines, vlines, hline_vals, vline_vals, const_cast<GdkColor*>(color.gobj()), size))
{
}

Glib::RefPtr<Grid> Grid::create(int hlines, int vlines, const Gdk::Color &color, unsigned int size)
{
    return Glib::RefPtr<Grid>( new Grid(hlines, vlines, color, size) );

}

Glib::RefPtr<Grid> Grid::create(int hlines, int vlines, float *hline_vals, float *vline_vals, const Gdk::Color &color, unsigned int size)
{
    return Glib::RefPtr<Grid>( new Grid(hlines, vlines, hline_vals, vline_vals, color, size) );

}

} // namespace GDatabox

namespace
{
} // anonymous namespace


namespace Glib
{

Glib::RefPtr<GDatabox::Grid> wrap(GtkDataboxGrid* object, bool take_copy)
{
  return Glib::RefPtr<GDatabox::Grid>( dynamic_cast<GDatabox::Grid*> (Glib::wrap_auto ((GObject*)(object), take_copy)) );
  //We use dynamic_cast<> in case of multiple inheritance.
}

} /* namespace Glib */


namespace GDatabox
{


/* The *_Class implementation: */

const Glib::Class& Grid_Class::init()
{
  if(!gtype_) // create the GType if necessary
  {
    // Glib::Class has to know the class init function to clone custom types.
    class_init_func_ = &Grid_Class::class_init_function;

    // This is actually just optimized away, apparently with no harm.
    // Make sure that the parent type has been created.
    //CppClassParent::CppObjectType::get_type();

    // Create the wrapper type, with the same class/instance size as the base type.
    register_derived_type(gtk_databox_grid_get_type());

    // Add derived versions of interfaces, if the C type implements any interfaces:

  }

  return *this;
}


void Grid_Class::class_init_function(void* g_class, void* class_data)
{
  BaseClassType *const klass = static_cast<BaseClassType*>(g_class);
  CppClassParent::class_init_function(klass, class_data);


}


Glib::ObjectBase* Grid_Class::wrap_new(GObject* object)
{
  return new Grid((GtkDataboxGrid*)object);
}


/* The implementation: */

GtkDataboxGrid* Grid::gobj_copy()
{
  reference();
  return gobj();
}

Grid::Grid(const Glib::ConstructParams& construct_params)
:
  Graph(construct_params)
{

}

Grid::Grid(GtkDataboxGrid* castitem)
:
  Graph((GtkDataboxGraph*)(castitem))
{}


Grid::~Grid()
{}


Grid::CppClassType Grid::grid_class_; // initialize static member

GType Grid::get_type()
{
  return grid_class_.init().get_type();
}


GType Grid::get_base_type()
{
  return gtk_databox_grid_get_type();
}


void Grid::set_hlines(int hlines)
{
  gtk_databox_grid_set_hlines(gobj(), hlines); 
}

int Grid::get_hlines() const
{
  return const_cast<Grid*>(this)->get_hlines();
}

void Grid::set_vlines(int hlines)
{
  gtk_databox_grid_set_vlines(gobj(), hlines); 
}

int Grid::get_vlines() const
{
  return const_cast<Grid*>(this)->get_vlines();
}


#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< int > Grid::property_grid_vlines() 
{
  return Glib::PropertyProxy< int >(this, "grid-vlines");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > Grid::property_grid_vlines() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "grid-vlines");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy< int > Grid::property_grid_hlines() 
{
  return Glib::PropertyProxy< int >(this, "grid-hlines");
}
#endif //GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
Glib::PropertyProxy_ReadOnly< int > Grid::property_grid_hlines() const
{
  return Glib::PropertyProxy_ReadOnly< int >(this, "grid-hlines");
}
#endif //GLIBMM_PROPERTIES_ENABLED


} // namespace GDatabox


