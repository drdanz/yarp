## To use this patch, delete all text before the "Index" line.
## Copyright: (C) 2008 Lorenz Mosenlechner
## CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT


Index: Source/Modules/allegrocl.cxx
===================================================================
--- Source/Modules/allegrocl.cxx	(revision 10654)
+++ Source/Modules/allegrocl.cxx	(working copy)
@@ -1084,7 +1084,8 @@
   of_ltype = lookup_defined_foreign_ltype(of_name);
 
   // Printf(f_clhead,";; from emit-synonym\n");
-  Printf(f_clhead, "(swig-def-synonym-type %s\n   %s\n   %s)\n", syn_ltype, of_ltype, syn_type);
+  if( of_ltype )
+      Printf(f_clhead, "(swig-def-synonym-type %s\n   %s\n   %s)\n", syn_ltype, of_ltype, syn_type);
 
   Delete(synonym_ns);
   Delete(of_ns_list);
@@ -1521,6 +1522,8 @@
 
   }
 
+  Preprocessor_define("SWIGALLEGROCL 1", 0);
+
   allow_overloading();
 }
 
@@ -1531,7 +1534,7 @@
 
   swig_package = unique_swig_package ? NewStringf("swig.%s", module_name) : NewString("swig");
 
-  Printf(cl_filename, "%s%s.cl", SWIG_output_directory(), Swig_file_basename(Getattr(n,"infile")));
+  Printf(cl_filename, "%s%s.cl", SWIG_output_directory(), module_name);
 
   f_cl = NewFile(cl_filename, "w");
   if (!f_cl) {
@@ -2628,7 +2631,7 @@
   String *actioncode = emit_action(n);
 
   String *tm = Swig_typemap_lookup_out("out", n, "result", f, actioncode);
-  if (tm) {
+  if (!is_void_return && tm) {
     Replaceall(tm, "$result", "lresult");
     Printf(f->code, "%s\n", tm);
     Printf(f->code, "    return lresult;\n");
Index: Lib/chicken/chicken.swg
===================================================================
--- Lib/chicken/chicken.swg	(revision 10654)
+++ Lib/chicken/chicken.swg	(working copy)
@@ -10,6 +10,7 @@
 /* chicken.h has to appear first. */
 
 %insert(runtime) %{
+#include <assert.h>
 #include <chicken.h>
 %}
 
Index: Lib/allegrocl/allegrocl.swg
===================================================================
--- Lib/allegrocl/allegrocl.swg	(revision 10654)
+++ Lib/allegrocl/allegrocl.swg	(working copy)
@@ -296,15 +296,30 @@
 	  sym))))
 
 (cl::defun full-name (id type arity class)
-  (cl::case type
-    (:getter (cl::format nil "~@[~A_~]~A" class id))
-    (:constructor (cl::format nil "new_~A~@[~A~]" id arity))
-    (:destructor (cl::format nil "delete_~A" id))
-    (:type (cl::format nil "ff_~A" id))
-    (:slot id)
-    (:ff-operator (cl::format nil "ffi_~A" id))
-    (otherwise (cl::format nil "~@[~A_~]~A~@[~A~]"
-                       class id arity))))
+  ; We need some kind of a hack here to handle template classes
+  ; and other synonym types right. We need the original name.
+  (let*( (sym (read-symbol-from-string 
+                (if (eq *swig-identifier-converter* 'identifier-convert-lispify)
+                  (string-lispify id)
+                  id)))
+         (sym-class (find-class sym nil))
+         (id (cond ( (not sym-class)
+                     id )
+                   ( (and sym-class
+                          (not (eq (class-name sym-class)
+                                sym)))
+                     (class-name sym-class) )
+                   ( t
+                     id ))) )
+    (cl::case type
+      (:getter (cl::format nil "~@[~A_~]~A" class id))
+      (:constructor (cl::format nil "new_~A~@[~A~]" id arity))
+      (:destructor (cl::format nil "delete_~A" id))
+      (:type (cl::format nil "ff_~A" id))
+      (:slot id)
+      (:ff-operator (cl::format nil "ffi_~A" id))
+      (otherwise (cl::format nil "~@[~A_~]~A~@[~A~]"
+                         class id arity)))))
   
 (cl::defun identifier-convert-null (id &key type class arity)
   (cl::if (cl::eq type :setter)
@@ -312,40 +327,37 @@
                id :type :getter :class class :arity arity))
       (read-symbol-from-string (full-name id type arity class))))
 
-(cl::defun identifier-convert-lispify (cname &key type class arity)
-  (cl::assert (cl::stringp cname))
-  (cl::when (cl::eq type :setter)
-    (cl::return-from identifier-convert-lispify
-      `(cl::setf ,(identifier-convert-lispify
-               cname :type :getter :class class :arity arity))))
-  (cl::setq cname (full-name cname type arity class))
-  (cl::if (cl::eq type :constant)
-      (cl::setf cname (cl::format nil "*~A*" cname)))
-  (cl::setf cname (excl::replace-regexp cname "_" "-"))
-  (cl::let ((lastcase :other)
-       	    newcase char res)
+(cl::defun string-lispify (str)
+  (cl::let ( (cname (excl::replace-regexp str "_" "-"))
+             (lastcase :other)
+             newcase char res ) 
     (cl::dotimes (n (cl::length cname))
       (cl::setf char (cl::schar cname n))
       (excl::if* (cl::alpha-char-p char)
          then
               (cl::setf newcase (cl::if (cl::upper-case-p char) :upper :lower))
-
-              (cl::when (cl::or (cl::and (cl::eq lastcase :upper)
-	      				 (cl::eq newcase :lower))
-                                (cl::and (cl::eq lastcase :lower)
-					 (cl::eq newcase :upper)))
+              (cl::when (cl::and (cl::eq lastcase :lower)
+                                 (cl::eq newcase :upper))
                 ;; case change... add a dash
                 (cl::push #\- res)
                 (cl::setf newcase :other))
-
               (cl::push (cl::char-downcase char) res)
-
               (cl::setf lastcase newcase)
-
          else
               (cl::push char res)
               (cl::setf lastcase :other)))
-    (read-symbol-from-string (cl::coerce (cl::nreverse res) 'string))))
+    (cl::coerce (cl::nreverse res) 'string)))
+  
+(cl::defun identifier-convert-lispify (cname &key type class arity)
+  (cl::assert (cl::stringp cname))
+  (cl::when (cl::eq type :setter)
+    (cl::return-from identifier-convert-lispify
+      `(cl::setf ,(identifier-convert-lispify
+               cname :type :getter :class class :arity arity))))
+  (cl::setq cname (full-name cname type arity class))
+  (cl::if (cl::eq type :constant)
+      (cl::setf cname (cl::format nil "*~A*" cname)))
+  (read-symbol-from-string (string-lispify cname)))
 
 (cl::defun id-convert-and-export (name &rest kwargs)
   (cl::multiple-value-bind (symbol package)
