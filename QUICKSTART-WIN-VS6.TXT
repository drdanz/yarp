# Copyright: (C) 2007 RobotCub Consortium
# Authors: Claudio Castellini, Giorgio Metta
# CopyPolicy: Released under the terms of the LGPLv2.1 or later, see LGPL.TXT

--------------------
a simple yarp2 HOWTO
--------------------
Or: how I did it in 60 minutes.

This will guide you through the installation and compilation of
YARP2. this works, and has been tested, for Windows and Microsoft
Visual Studio 6 only.

(0) decide a directory where to unpack all and, in general, where to work.
    I use c:\work. See also the companion software page with useful links
    for downloading libraries (http://pasa.liralab.it/yarp/software.html).

(1) download and compile ACE
        1. dial http://deuce.doc.wustl.edu/ACE-5.5.zip
        2. unpack to c:\work. the archive creates a directory called
           ACE_wrappers, but I prefer to rename it to ACE-5.5 in order
           to avoid confusion with earlier versions of ACE.
        3. create c:\work\ACE-5.5\ace\config.h with the single line
             #include "ace/config-win32.h"
           in it.
        4. in vc++, open c:\work\ACE-5.5\ACE.dsw; compile project ACE, 
           both in release and debug configurations. you should end up 
           with ACE{d}.{lib,dll} in c:\work\ACE-5.5\lib.
        5. add ACE_ROOT = c:\work\ACE-5.5 to env vars, and 
           %ACE_ROOT%\lib to PATH.

(2) download and install CMake

      http://www.cmake.org/files/v2.4/cmake-2.4.2-win32-x86.exe

      (I chose "add cmake to path for all users')

(3) download yarp2 via CVS to c:\work\yarp2. either use the command line

      cvs -d:pserver:anonymous@yarp0.cvs.sf.net:/cvsroot/yarp0 login
      cvs -z3 -d:pserver:anonymous@yarp0.cvs.sf.net:/cvsroot/yarp0 co -P yarp2

    or do the same operations specified above in the winCVS GUI. of
    course, if you already have a username/pwd on the repository, you
    might use your own.
    WARNING!! if you download using the anonymous user, you won't be able to
    change the repository. you won't even be able to commit anything. so if
    you DO have a user, I strongly recommend you use it instead of anonymous.
    also, in that case, you might want to use ssh tunneling:

      cvs -d:ssh:username@yarp0.cvs.sf.net:/cvsroot/yarp0 login
      cvs -z3 -d:ssh:username@yarp0.cvs.sf.net:/cvsroot/yarp0 co -P yarp2

(4) open CMake, indicate c:\work\yarp2 as both the location of the source 
    code and the destination for the EXEs; then hit "configure". you'll 
    get some red variables, but if ACE is configured ok, the only really 
    wrong value should be the yarp installation dir 
    (CMAKE_INSTALLATION_PREFIX), which I select as c:\work\yarp2. 
    Hit configure again, everything should turn gray; hit then
    OK, and a number of .DSP files should appear in c:\work\yarp2

(5) in vc++, open c:\work\yarp2\YARP.dsw and do build > batch build... 
    then choose build. this will compile all yarp pieces in all possible 
    flavours. if the RUN_TESTS and/or PACKAGE projects fail, do not worry. 
    at the end you should have directories c:\work\yarp2\{bin,lib} in which 
    the EXEs and the libraries are, in turn.
    Watch out! the *last* configuration compiled by vc++ is the one 
    you will find in c:\work\yarp2\bin; on my system that is debug, 
    which is quite undesirable. therefore I copied 
    c:\work\yarp2\bin\Release\*.exe back to c:\work\yarp2\bin.

You're done!

You might now want to add c:\work\yarp2\bin to your PATH. try then 
opening a cmd and do "yarp server", then open one more cmd and 
do "yarp check". this should end with "YARP seems OK!".

------------------------------
if you need to install the GUI
------------------------------

you might want to install the GUI as well, since a lot of applications will
actually rely on them. an example is yarpview, an application which opens
a window and an input port, and just displays on the screen whtever is read
off the port.

so, after having done all you saw earlier on,

(1) download and install GLADE (the developer's archive!) for Windows:

      http://gladewin32.sourceforge.net

    any version should do, I work fine with 2.10.7. after the installation,
    you should also have a new env var GTK_BASEPATH defined and set to the
    dir you installed Glade to, and %GTK_BASEPATH%\bin should be in the
    PATH env var.

(2) re-run CMake, and this time set the variable CREATE_GUIS to ON. hit
    configure and then ok.

that is basically it. as far as I know the code previously compiled needs not
be recompiled. as a test, try this: open vc++ and build
C:\work\yarp2\src\yarp-imageviewer\yarpview.dsp. you should then find a yarpview.exe
in, e.g., c:\work\yarp2\bin\Release. copy that file to c:\work\yarp2\bin, so
that now it is on your PATH. Now open a shell and do "yarp server"; then open
another one and do "yarpview":
- a window called YARP GTK Image Viewer should pop up
- the yarp server should report a port called /yarpview/i:img being registered.

Claudio
January 30th, 2007
